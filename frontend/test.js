// Script de prueba para CINEMAX
// Ejecutar en la consola del navegador para probar funcionalidades

console.log('üé¨ CINEMAX - Script de Prueba');

// 1. Verificar que CONFIG est√© cargado
if (typeof CONFIG === 'undefined') {
    console.error('‚ùå CONFIG no est√° cargado');
} else {
    console.log('‚úÖ CONFIG cargado:', CONFIG.API.BASE_URL);
}

// 2. Verificar que Utils est√© cargado
if (typeof Utils === 'undefined') {
    console.error('‚ùå Utils no est√° cargado');
} else {
    console.log('‚úÖ Utils cargado');
}

// 3. Probar funci√≥n de formateo
if (typeof Utils !== 'undefined') {
    console.log('üí∞ Formateo de moneda:', Utils.format.currency(120));
    console.log('üìÖ Formateo de fecha:', Utils.format.date('2025-06-27'));
}

// 4. Probar construcci√≥n de URL de imagen
if (typeof ConfigUtils !== 'undefined') {
    const testUrl = ConfigUtils.buildImageUrl('/example.jpg', 'POSTER', 'LARGE');
    console.log('üñºÔ∏è URL de imagen de prueba:', testUrl);
}

// 5. Verificar elementos del DOM
const elementos = {
    loginSection: document.getElementById('loginSection'),
    username: document.getElementById('username'),
    password: document.getElementById('password'),
    notifications: document.getElementById('notifications'),
    loadingSpinner: document.getElementById('loadingSpinner')
};

console.log('üèóÔ∏è Elementos del DOM:');
Object.entries(elementos).forEach(([name, element]) => {
    if (element) {
        console.log(`‚úÖ ${name}: encontrado`);
    } else {
        console.error(`‚ùå ${name}: no encontrado`);
    }
});

// 6. Funci√≥n de prueba de login (sin hacer la petici√≥n real)
function pruebaLogin() {
    console.log('üîê Simulando inicio de sesi√≥n...');
    
    // Simular usuario de prueba
    const testUser = {
        id: 1,
        username: 'admin',
        role: 'admin'
    };
    
    // Simular token
    const testToken = 'test-token-123';
    
    // Guardar en localStorage
    localStorage.setItem('authToken', testToken);
    localStorage.setItem('currentUser', JSON.stringify(testUser));
    
    console.log('‚úÖ Datos de prueba guardados');
    console.log('Usuario:', testUser);
    console.log('Token:', testToken);
    
    // Mostrar notificaci√≥n de prueba
    if (typeof showNotification === 'function') {
        showNotification('¬°Prueba de notificaci√≥n exitosa!', 'success');
    }
}

// 7. Funci√≥n para limpiar datos de prueba
function limpiarPrueba() {
    localStorage.removeItem('authToken');
    localStorage.removeItem('currentUser');
    console.log('üßπ Datos de prueba limpiados');
}

// 8. Mostrar funciones disponibles
console.log('üõ†Ô∏è Funciones de prueba disponibles:');
console.log('- pruebaLogin(): Simula un login exitoso');
console.log('- limpiarPrueba(): Limpia los datos de prueba');

// 9. Verificar conectividad con la API (opcional)
async function probarAPI() {
    try {
        console.log('üåê Probando conectividad con API...');
        const response = await fetch(CONFIG.API.BASE_URL + '/');
        if (response.ok) {
            const data = await response.json();
            console.log('‚úÖ API respondi√≥:', data);
        } else {
            console.warn('‚ö†Ô∏è API respondi√≥ con c√≥digo:', response.status);
        }
    } catch (error) {
        console.error('‚ùå Error conectando con API:', error.message);
        console.log('üí° Aseg√∫rate de que el backend est√© corriendo en', CONFIG.API.BASE_URL);
    }
}

// Ejecutar prueba de API autom√°ticamente
probarAPI();

console.log('üéØ Script de prueba completado. Revisa los resultados arriba.');
console.log('üìù Si hay errores, verifica que todos los archivos est√©n cargados correctamente.');
